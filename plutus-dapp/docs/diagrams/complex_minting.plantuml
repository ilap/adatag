@startuml "@datag minting"
state "Inputs" as stateI {
    state IU as "User" #line.dotted {
        json "Collateral UTxO" as JU1 {
        "address": "user's address",
        "value":"ADA covers script running",
        "datum": "N/A",
        "script hash": "N/A"
        }
        json "Deposit Source" as JU2 {
        "address": "user's address",
        "value":"ADA covers time deposit",
        "datum": "N/A",
        "script hash": "N/A"
        }
    }
    state ITV2 as  "Control NFT from Tree Validator address" #line.dotted {
        json "TD Reference Script UTxO" as JTV2 {
        "address": "TV script address",
        "value":"CNFT.a",
        "datum": {"n":"nr. of element in the tree","x": "old username","acc":"Acc(U)"},
        "script hash": ""
        }
    }    
    state IMP as "AFV: Minting Policy" #line.dotted {
        json "MT Reference Script UTxO" as JMT1 {
        "address": "N/A",
        "value":"N/A",
        "datum": "N/A",
        "script hash": "Minting Hash"
        }
    } 
    state ITV as "AFV: Tree Validator" #line.dotted {
        json "TV Reference Script UTxO" as JTV1 {
        "address": "N/A",
        "value":"N/A",
        "datum": "N/A",
        "script hash": " Tree Validator Hash"
        }
    }
}

state "Transaction" as stateT {

    state TXTV as "Tree Validator" #line.dotted {
    }
    state TXMP as "Minting Policy" #line.dotted {
    }
    state TXR as "User input" #line.dotted {
       json "Redeemer" as UR {
           "action": "Adding or Deleting",
           "x": "element adding/removing",
           "nu":{"node to update": ["a","b"]},
           "na": {"node to append/delete": ["a","b"]},
           "U'": "The updated minimal subtree"
       }
    }
}

state "Outputs" as stateO {
    state OU as "Minted username to user's address" #line.dotted {    
        json "Output" as U2 {
        "address": "user's address",
        "value":"MTNFT.username",
        "datum": "N/A",
        "script hash": "N/A"
        }
    }
    state OTV as "Control NFT to Tree Validator address" #line.dotted{
        json "Output" as TV2 {
        "address": "TV script address",
        "value":"CNFT.a",
        "datum": {"n'":"n+1 or n-1","x'": "username","acc":"Acc(U')"},
        "script hash": ""
        }
    }
    state OTD as "Deposit to the TD Validator address" #line.dotted{
        json "Output" as TD2 {
        "address": "TD script address",
        "value":"deposited amount",
        "datum": {"beneficiary": "pkh of the user","deadline":"~ 20 days from now"},
        "script hash": ""
        }
    }
   

   ' Inputs
   '##################################################
   JU1 -down[hidden]-> JU2

   IMP -up[hidden]-> ITV
   IMP -down[hidden]-> IU

   ITV -up[hidden]-> ITV2

   ITV2 -right[dashed]-> TXTV
   ITV  -right[dashed]-> TXTV
   IMP -right-> TXMP

   TXMP -right-> OU
   TXMP -right-> OTD
   
   ' Transactions
   '##################################################
   TXTV: The validator is parameterized \n with the currency symbol of \n the control NFT and the minting \n script to prevent any spending \n without the Minting Policy.
   TXTV: <b>Constraints</b>
  
   TXTV -down[dotted]-> TXMP

   TXMP: The minting policy is parameterized \n with the currency symbol of \n the control NFT
 

   TXTV -right[dashed]--> OTV
 
   'TXMP -down[hidden]-> TXR
   TXR -up-> TXMP
    
   ' Outputs
   '##################################################
   OU -up[hidden]-> OTV
   OU -down[hidden]-> OTD
   
}
@enduml